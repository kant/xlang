// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/impl/Component.Fast.2.h"
namespace winrt::impl
{
    template <typename D> hstring consume_Component_Fast_IFastClass<D>::First() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::Fast::IFastClass)->First(&result));
        return { construct_from_abi, result };
    }
    template <typename D> hstring consume_Component_Fast_IFastClass<D>::Second() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::Fast::IFastClass)->Second(&result));
        return { construct_from_abi, result };
    }
    template <typename D> hstring consume_Component_Fast_IFastClass2<D>::Third() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::Fast::IFastClass2)->Third(&result));
        return { construct_from_abi, result };
    }
    template <typename D> hstring consume_Component_Fast_IFastClass2<D>::Fourth() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::Fast::IFastClass2)->Fourth(&result));
        return { construct_from_abi, result };
    }
    template <typename D> hstring consume_Component_Fast_INotExclusive<D>::NotExclusive() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::Fast::INotExclusive)->NotExclusive(&result));
        return { construct_from_abi, result };
    }
    template <typename D>
    struct produce<D, Component::Fast::IFastClass> : produce_base<D, Component::Fast::IFastClass>
    {
        int32_t WINRT_CALL First(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().First());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL Second(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().Second());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
    template <typename D>
    struct produce<D, Component::Fast::IFastClass2> : produce_base<D, Component::Fast::IFastClass2>
    {
        int32_t WINRT_CALL Third(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().Third());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL Fourth(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().Fourth());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
    template <typename D>
    struct produce<D, Component::Fast::INotExclusive> : produce_base<D, Component::Fast::INotExclusive>
    {
        int32_t WINRT_CALL NotExclusive(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().NotExclusive());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
}
namespace winrt::Component::Fast
{
inline FastClass::FastClass() :
    FastClass(impl::call_factory<FastClass>([](auto&& f) { return f.template ActivateInstance<FastClass>(); }))
{}
}
namespace std
{
    template<> struct hash<winrt::Component::Fast::IFastClass> : winrt::impl::hash_base<winrt::Component::Fast::IFastClass> {};
    template<> struct hash<winrt::Component::Fast::IFastClass2> : winrt::impl::hash_base<winrt::Component::Fast::IFastClass2> {};
    template<> struct hash<winrt::Component::Fast::INotExclusive> : winrt::impl::hash_base<winrt::Component::Fast::INotExclusive> {};
    template<> struct hash<winrt::Component::Fast::FastClass> : winrt::impl::hash_base<winrt::Component::Fast::FastClass> {};
}
