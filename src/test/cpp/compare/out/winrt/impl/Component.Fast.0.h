// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/base.h"
namespace winrt::Component::Fast
{
    struct IFastClass;
    struct IFastClass2;
    struct INotExclusive;
    struct FastClass;
}
namespace winrt::impl
{
    template <> struct category<Component::Fast::IFastClass>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Fast::IFastClass2>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Fast::INotExclusive>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Fast::FastClass>
    {
        using type = class_category;
    };
    template <> struct name<Component::Fast::IFastClass>
    {
        static constexpr auto & value{ L"Component.Fast.IFastClass" };
    };
    template <> struct name<Component::Fast::IFastClass2>
    {
        static constexpr auto & value{ L"Component.Fast.IFastClass2" };
    };
    template <> struct name<Component::Fast::INotExclusive>
    {
        static constexpr auto & value{ L"Component.Fast.INotExclusive" };
    };
    template <> struct name<Component::Fast::FastClass>
    {
        static constexpr auto & value{ L"Component.Fast.FastClass" };
    };
    template <> struct guid_storage<Component::Fast::IFastClass>
    {
        static constexpr guid value{ 0x8573AFB3,0xE808,0x5271,{ 0x8C,0x72,0x2A,0x69,0xE8,0x98,0x4C,0x99 } };
    };
    template <> struct guid_storage<Component::Fast::IFastClass2>
    {
        static constexpr guid value{ 0xD966B113,0x3548,0x591C,{ 0xB9,0x06,0x70,0x65,0x79,0xC9,0x40,0xF5 } };
    };
    template <> struct guid_storage<Component::Fast::INotExclusive>
    {
        static constexpr guid value{ 0x218F354D,0x8EAD,0x573F,{ 0xB1,0xE2,0xA9,0x00,0xE6,0x14,0x8D,0xD9 } };
    };
    template <> struct default_interface<Component::Fast::FastClass>
    {
        using type = Component::Fast::IFastClass;
    };
    template <> struct abi<Component::Fast::IFastClass>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL First(void**) noexcept = 0;
            virtual int32_t WINRT_CALL Second(void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::Fast::IFastClass2>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL Third(void**) noexcept = 0;
            virtual int32_t WINRT_CALL Fourth(void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::Fast::INotExclusive>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL NotExclusive(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Component_Fast_IFastClass
    {
        hstring First() const;
        hstring Second() const;
    };
    template <> struct consume<Component::Fast::IFastClass>
    {
        template <typename D> using type = consume_Component_Fast_IFastClass<D>;
    };
    template <typename D>
    struct consume_Component_Fast_IFastClass2
    {
        hstring Third() const;
        hstring Fourth() const;
    };
    template <> struct consume<Component::Fast::IFastClass2>
    {
        template <typename D> using type = consume_Component_Fast_IFastClass2<D>;
    };
    template <typename D>
    struct consume_Component_Fast_INotExclusive
    {
        hstring NotExclusive() const;
    };
    template <> struct consume<Component::Fast::INotExclusive>
    {
        template <typename D> using type = consume_Component_Fast_INotExclusive<D>;
    };
}
