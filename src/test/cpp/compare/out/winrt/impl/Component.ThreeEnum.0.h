// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/base.h"
namespace winrt::Component::ThreeEnum
{
    enum class Another : int32_t
    {
        First = -1,
        Second = 0,
        Third = 1,
    };
    enum class Signed : int32_t
    {
        First = -1,
        Second = 0,
        Third = 1,
    };
    enum class Unsigned : uint32_t
    {
        First = 0,
        Second = 0x1,
        Third = 0x2,
    };
}
namespace winrt::impl
{
    template<> struct is_enum_flag<Component::ThreeEnum::Unsigned> : std::true_type
    {
    };
    template <> struct category<Component::ThreeEnum::Another>
    {
        using type = enum_category;
    };
    template <> struct category<Component::ThreeEnum::Signed>
    {
        using type = enum_category;
    };
    template <> struct category<Component::ThreeEnum::Unsigned>
    {
        using type = enum_category;
    };
    template <> struct name<Component::ThreeEnum::Another>
    {
        static constexpr auto & value{ L"Component.ThreeEnum.Another" };
    };
    template <> struct name<Component::ThreeEnum::Signed>
    {
        static constexpr auto & value{ L"Component.ThreeEnum.Signed" };
    };
    template <> struct name<Component::ThreeEnum::Unsigned>
    {
        static constexpr auto & value{ L"Component.ThreeEnum.Unsigned" };
    };
}
